{"version":3,"file":"utils.esm.js","sources":["../src/internal-utils.ts","../src/collectValues.ts","../src/collect.ts","../src/createListener.ts","../src/mergeWithKey.ts","../src/split.ts","../src/suspend.ts","../src/suspended.ts","../src/switchMapSuspended.ts","../src/selfDependant.ts"],"sourcesContent":["import { Observable, defer, GroupedObservable } from \"rxjs\"\nimport { shareLatest } from \"@react-rxjs/core\"\nimport {\n  scan,\n  publish,\n  endWith,\n  takeLast,\n  takeUntil,\n  mergeMap,\n} from \"rxjs/operators\"\n\nexport const defaultStart = <T>(value: T) => (source$: Observable<T>) =>\n  new Observable<T>((observer) => {\n    let emitted = false\n    const subscription = source$.subscribe(\n      (x) => {\n        emitted = true\n        observer.next(x)\n      },\n      (e) => observer.error(e),\n      () => observer.complete(),\n    )\n\n    if (!emitted) {\n      observer.next(value)\n    }\n\n    return subscription\n  })\n\nexport const scanWithDefaultValue = <I, O>(\n  accumulator: (acc: O, current: I) => O,\n  getSeed: () => O,\n) => (source: Observable<I>) =>\n  defer(() => {\n    const seed = getSeed()\n    return source.pipe(scan(accumulator, seed), defaultStart(seed))\n  })\n\nexport const set = \"s\" as const\nexport const del = \"d\" as const\nexport const complete = \"c\" as const\n\nexport const collector = <K, V, VV>(\n  source: Observable<GroupedObservable<K, V>>,\n  enhancer: (\n    source: GroupedObservable<K, V>,\n  ) => Observable<{ t: \"d\"; k: K } | { t: \"s\"; k: K; v: VV }>,\n): Observable<Map<K, VV>> =>\n  source.pipe(\n    publish((x) => x.pipe(mergeMap(enhancer), takeUntil(takeLast(1)(x)))),\n    endWith({ t: complete }),\n    scanWithDefaultValue(\n      (acc, val) => {\n        if (val.t === set) {\n          acc.set(val.k, val.v)\n        } else if (val.t === del) {\n          acc.delete(val.k)\n        } else {\n          acc.clear()\n        }\n        return acc\n      },\n      () => new Map<K, VV>(),\n    ),\n    shareLatest(),\n  )\n","import { Observable, GroupedObservable, OperatorFunction } from \"rxjs\"\nimport { map, endWith } from \"rxjs/operators\"\nimport { set, del, collector } from \"./internal-utils\"\n\n/**\n * A pipeable operator that collects all the GroupedObservables emitted by\n * the source and emits a Map with the latest values of the inner observables.\n */\nexport const collectValues = <K, V>(): OperatorFunction<\n  GroupedObservable<K, V>,\n  Map<K, V>\n> => (source$: Observable<GroupedObservable<K, V>>): Observable<Map<K, V>> =>\n  collector(source$, (inner$) =>\n    inner$.pipe(\n      map((v) => ({ t: set, k: inner$.key, v })),\n      endWith({ t: del, k: inner$.key }),\n    ),\n  )\n","import { GroupedObservable, Observable, OperatorFunction } from \"rxjs\"\nimport {\n  startWith,\n  endWith,\n  ignoreElements,\n  map,\n  distinctUntilChanged,\n  skipWhile,\n} from \"rxjs/operators\"\nimport { set, del, collector } from \"./internal-utils\"\n\nconst defaultFilter = (source$: Observable<any>) =>\n  source$.pipe(ignoreElements(), startWith(true), endWith(false))\n\n/**\n * A pipeable operator that collects all the GroupedObservables emitted by\n * the source and emits a Map with the active inner observables\n *\n * @param filter? A function that receives the inner Observable and returns an\n * Observable of boolean values, which indicates whether the inner observable\n * should be collected.\n */\nexport const collect = <K, V>(\n  filter?: (source$: GroupedObservable<K, V>) => Observable<boolean>,\n): OperatorFunction<\n  GroupedObservable<K, V>,\n  Map<K, GroupedObservable<K, V>>\n> => {\n  const enhancer = filter\n    ? (source$: GroupedObservable<K, V>) =>\n        filter(source$).pipe(\n          endWith(false),\n          skipWhile((x) => !x),\n          distinctUntilChanged(),\n        )\n    : defaultFilter\n\n  return (source$: Observable<GroupedObservable<K, V>>) =>\n    collector(source$, (o) =>\n      map((x) => ({ t: x ? set : del, k: o.key, v: o }))(enhancer(o)),\n    )\n}\n","import { Observable, Subject } from \"rxjs\"\n\nconst defaultMapper: any = () => {}\n\nexport function createListener<A extends unknown[], T>(\n  mapper: (...args: A) => T,\n): [Observable<T>, (...args: A) => void]\nexport function createListener(): [Observable<void>, () => void]\n\nexport function createListener<A extends unknown[], T>(\n  mapper: (...args: A) => T = defaultMapper,\n): [Observable<T>, (...args: A) => void] {\n  const subject = new Subject<T>()\n  return [subject.asObservable(), (...args: A) => subject.next(mapper(...args))]\n}\n","import { merge, Observable, ObservableInput, from, SchedulerLike } from \"rxjs\"\nimport { map } from \"rxjs/operators\"\n\n/**\n * Emits the values from all the streams of the provided object, in a result\n * which provides the key of the stream of that emission.\n *\n * @param input object of streams\n */\nexport const mergeWithKey: <\n  O extends { [P in keyof any]: ObservableInput<any> },\n  OT extends {\n    [K in keyof O]: O[K] extends ObservableInput<infer V>\n      ? { type: K; payload: V }\n      : unknown\n  }\n>(\n  x: O,\n  concurrent?: number,\n  scheduler?: SchedulerLike,\n) => Observable<OT[keyof O]> = (input, ...optionalArgs) =>\n  merge(\n    ...(Object.entries(input)\n      .map(\n        ([type, stream]) =>\n          from(stream).pipe(\n            map((payload) => ({ type, payload } as any)),\n          ) as any,\n      )\n      .concat(optionalArgs) as any[]),\n  )\n","import {\n  Observable,\n  GroupedObservable,\n  Subject,\n  ReplaySubject,\n  OperatorFunction,\n} from \"rxjs\"\nimport { shareReplay } from \"rxjs/operators\"\n\nconst emptyError = {}\n\n/**\n * Groups the items emitted by the source based on the keySelector function,\n * emitting one Observable for each group.\n *\n * @param keySelector Function to define the group of an item\n */\nexport function split<T, K>(\n  keySelector: (value: T) => K,\n): OperatorFunction<T, GroupedObservable<K, T>>\n\n/**\n * Groups the items emitted by the source based on the keySelector function,\n * emitting one Observable for each group.\n *\n * @param keySelector Function to define the group of an item\n * @param streamSelector Function to apply to each resulting group\n */\nexport function split<T, K, R>(\n  keySelector: (value: T) => K,\n  streamSelector: (grouped: Observable<T>, key: K) => Observable<R>,\n): OperatorFunction<T, GroupedObservable<K, R>>\n\nexport function split<T, K, R>(\n  keySelector: (value: T) => K,\n  streamSelector?: (grouped: Observable<T>, key: K) => Observable<R>,\n): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (stream: Observable<T>) =>\n    new Observable<GroupedObservable<K, R>>((subscriber) => {\n      const groups: Map<K, Subject<T>> = new Map()\n\n      let error = emptyError\n      const sub = stream.subscribe(\n        (x) => {\n          const key = keySelector(x)\n          if (groups.has(key)) {\n            return groups.get(key)!.next(x)\n          }\n\n          const subject = streamSelector\n            ? new Subject<T>()\n            : new ReplaySubject<T>(1)\n          groups.set(key, subject)\n\n          const res = (streamSelector\n            ? streamSelector(subject, key).pipe(shareReplay(1))\n            : subject.asObservable()) as GroupedObservable<K, R>\n\n          res.key = key\n          const onFinish = () => groups.delete(key)\n          res.subscribe(undefined, onFinish, onFinish)\n\n          subject.next(x)\n          subscriber.next(res)\n        },\n        (e) => {\n          subscriber.error((error = e))\n        },\n        () => {\n          subscriber.complete()\n        },\n      )\n\n      return () => {\n        sub.unsubscribe()\n        groups.forEach(\n          error === emptyError ? (g) => g.complete() : (g) => g.error(error),\n        )\n      }\n    })\n}\n","import { ObservableInput, from } from \"rxjs\"\nimport { startWith } from \"rxjs/operators\"\nimport { SUSPENSE } from \"@react-rxjs/core\"\n\n/**\n * A RxJS creation operator that prepends a SUSPENSE on the source observable.\n *\n * @param source$ Source observable\n */\nexport const suspend = <T>(source$: ObservableInput<T>) =>\n  from(source$).pipe(startWith(SUSPENSE))\n","import { suspend } from \"./suspend\"\nimport { OperatorFunction } from \"rxjs\"\nimport { SUSPENSE } from \"@react-rxjs/core\"\n\n/**\n * A RxJS pipeable operator that prepends a SUSPENSE on the source observable.\n */\nexport const suspended = <T>(): OperatorFunction<T, T | typeof SUSPENSE> =>\n  suspend\n","import {\n  ObservableInput,\n  Observable,\n  OperatorFunction,\n  ObservedValueOf,\n} from \"rxjs\"\nimport { switchMap } from \"rxjs/operators\"\nimport { suspend } from \"./suspend\"\nimport { SUSPENSE } from \"@react-rxjs/core\"\n\n/**\n * Same behaviour as rxjs' `switchMap`, but prepending every new event with\n * SUSPENSE.\n *\n * @param fn Projection function\n */\nexport const switchMapSuspended = <T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n): OperatorFunction<T, ObservedValueOf<O> | typeof SUSPENSE> => (\n  src$: Observable<T>,\n) => src$.pipe(switchMap((x, index) => suspend(project(x, index))))\n","import { Observable, Subject, MonoTypeOperatorFunction } from \"rxjs\"\nimport { tap } from \"rxjs/operators\"\n\n/**\n * A creation operator that helps at creating observables that have circular\n * dependencies\n *\n * @returns [1, 2]\n * 1. The inner subject as an Observable\n * 2. A pipable operator that taps into the inner Subject\n */\nexport const selfDependant = <T>(): [\n  Observable<T>,\n  () => MonoTypeOperatorFunction<T>,\n] => {\n  const mirrored$ = new Subject<T>()\n  return [\n    mirrored$.asObservable(),\n    () => tap(mirrored$) as MonoTypeOperatorFunction<T>,\n  ]\n}\n"],"names":["defaultStart","value","source$","Observable","observer","emitted","subscription","subscribe","x","next","e","error","complete","scanWithDefaultValue","accumulator","getSeed","source","defer","seed","pipe","scan","set","del","collector","enhancer","publish","mergeMap","takeUntil","takeLast","endWith","t","acc","val","k","v","clear","Map","shareLatest","collectValues","inner$","map","key","defaultFilter","ignoreElements","startWith","collect","filter","skipWhile","distinctUntilChanged","o","defaultMapper","createListener","mapper","subject","Subject","asObservable","mergeWithKey","input","optionalArgs","merge","Object","entries","type","stream","from","payload","concat","emptyError","split","keySelector","streamSelector","subscriber","groups","sub","has","get","ReplaySubject","res","shareReplay","onFinish","undefined","unsubscribe","forEach","g","suspend","SUSPENSE","suspended","switchMapSuspended","project","src$","switchMap","index","selfDependant","mirrored$","tap"],"mappings":"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"}