{"version":3,"file":"voting-sdk.mjs","sources":["../../../src/voting/voting-sdk.ts"],"sourcesContent":["import { partitionEntries } from \"@/util/watchEntries\"\nimport { combineKeys, toKeySet } from \"@react-rxjs/utils\"\nimport { SS58String } from \"polkadot-api\"\nimport { combineLatest, firstValueFrom, map, Observable } from \"rxjs\"\nimport {\n  ConvictionVotingVoteAccountVote,\n  ConvictionVotingVoteVoting,\n  VotingConviction,\n  VotingSdkTypedApi,\n} from \"./descriptors\"\nimport {\n  ConvictionVotingSdk,\n  UnlockSchedule,\n  Vote,\n  VotingTrack,\n} from \"./sdk-types\"\n\nexport function createConvictionVotingSdk(\n  typedApi: VotingSdkTypedApi,\n): ConvictionVotingSdk {\n  const enhanceVotingFor = (\n    [account, track]: [SS58String, number],\n    votingFor: ConvictionVotingVoteVoting,\n    voteLockingPeriod: number,\n  ): VotingTrack => {\n    const lock = votingFor.value.prior[1]\n      ? {\n          block: votingFor.value.prior[0],\n          balance: votingFor.value.prior[1],\n        }\n      : null\n\n    const unlock = () =>\n      typedApi.tx.ConvictionVoting.unlock({\n        class: track,\n        target: {\n          type: \"Id\",\n          value: account,\n        },\n      })\n\n    const delegationPower = {\n      track,\n      ...votingFor.value.delegations,\n    }\n\n    const trackDetails = {\n      track,\n      delegationPower,\n      lock,\n      unlock,\n    }\n\n    if (votingFor.type === \"Casting\") {\n      // Rollup typescript build struggles otherwise\n      const rawVotes: [number, ConvictionVotingVoteAccountVote][] =\n        votingFor.value.votes\n      const votes = rawVotes.map(([poll, vote]): Vote => {\n        const remove = () =>\n          typedApi.tx.ConvictionVoting.remove_vote({\n            class: track,\n            index: poll,\n          })\n\n        if (vote.type === \"Standard\") {\n          const convictionValue = vote.value.vote & 0x7f\n          const conviction = {\n            type: convictions[convictionValue],\n            value: undefined,\n          }\n          const direction: \"aye\" | \"nay\" =\n            vote.value.vote & 0x80 ? \"aye\" : \"nay\"\n\n          return {\n            type: \"standard\",\n            poll,\n            direction,\n            balance: vote.value.balance,\n            conviction,\n            getLock(outcome) {\n              if (convictionValue && outcome?.side === direction) {\n                const end =\n                  outcome.ended +\n                  convictionLockMultiplier[conviction.type] * voteLockingPeriod\n\n                return {\n                  type:\n                    !trackDetails.lock || trackDetails.lock.block === end\n                      ? \"locked\"\n                      : trackDetails.lock.block < end\n                        ? // Only `extends` if the outer balance is greater than the vote balance\n                          // Because it actually only has an effect if it's extending the lock of a larger amount of tokens\n                          trackDetails.lock.balance > vote.value.balance\n                          ? \"extends\"\n                          : \"locked\"\n                        : // Same reasoning\n                          trackDetails.lock.balance < vote.value.balance\n                          ? \"extended\"\n                          : \"locked\",\n                  end,\n                }\n              }\n              return { type: \"free\" }\n            },\n            remove,\n          }\n        }\n        const votes = {\n          aye: vote.value.aye,\n          nay: vote.value.nay,\n          abstain: ((vote.value as any).abstain as bigint) ?? 0n,\n        }\n        const votesWithValue = Object.entries(votes).filter(([, v]) => v > 0n)\n        if (votesWithValue.length === 1) {\n          return {\n            type: \"standard\",\n            poll,\n            direction: votesWithValue[0][0] as any,\n            balance: votesWithValue[0][1],\n            conviction: {\n              type: \"None\",\n              value: undefined,\n            },\n            getLock() {\n              return { type: \"free\" }\n            },\n            remove,\n          }\n        }\n        return {\n          type: \"split\",\n          poll,\n          balance: Object.values(votes).reduce((a, b) => a + b),\n          ...votes,\n          getLock() {\n            return { type: \"free\" }\n          },\n          remove,\n        }\n      })\n\n      return {\n        type: \"casting\",\n        votes,\n        getUnlockSchedule(outcomes) {\n          const unlocks = votes.map((v, i) => {\n            const lock = v.getLock(outcomes[i])\n            return {\n              type: \"poll\" as \"poll\" | \"lock\",\n              id: v.poll,\n              block: lock.type === \"free\" ? 0 : lock.end,\n              balance: v.balance,\n            }\n          })\n          if (trackDetails.lock) {\n            unlocks.push({\n              type: \"lock\",\n              id: 0,\n              ...trackDetails.lock,\n            })\n          }\n          unlocks.sort((a, b) => Number(a.balance - b.balance))\n\n          const result: UnlockSchedule = []\n\n          let unlocked = 0\n          const getNextGroup = () => {\n            if (unlocked >= unlocks.length) return []\n\n            const start = unlocked\n            const balance = unlocks[unlocked++].balance\n            while (\n              unlocked < result.length &&\n              unlocks[unlocked].balance === balance\n            ) {\n              unlocked++\n            }\n            return unlocks.slice(start, unlocked)\n          }\n\n          let block = 0\n          while (unlocked < unlocks.length) {\n            const group = getNextGroup()\n            const nextBalance = unlocks[unlocked]?.balance ?? 0n\n            block = Math.max(block, ...group.map((l) => l.block))\n            const balance = group[0].balance - nextBalance\n\n            result.push({\n              block,\n              balance,\n              unlocks: group.map((v) =>\n                v.type === \"lock\"\n                  ? { type: \"lock\" }\n                  : {\n                      type: \"poll\",\n                      id: v.id,\n                    },\n              ),\n            })\n          }\n\n          return result\n        },\n        ...trackDetails,\n      }\n    }\n    return {\n      type: \"delegating\",\n      target: votingFor.value.target,\n      balance: votingFor.value.balance,\n      conviction: votingFor.value.conviction,\n      lockDuration:\n        convictionLockMultiplier[votingFor.value.conviction.type] *\n        voteLockingPeriod,\n      remove() {\n        return typedApi.tx.ConvictionVoting.undelegate({\n          class: track,\n        })\n      },\n      ...trackDetails,\n    }\n  }\n\n  const voteLockingPeriod$ =\n    typedApi.constants.ConvictionVoting.VoteLockingPeriod()\n  const votingTrack$ = (account: SS58String, track: number) =>\n    combineLatest([\n      typedApi.query.ConvictionVoting.VotingFor.watchValue(account, track),\n      voteLockingPeriod$,\n    ]).pipe(\n      map(([v, lockPeriod]) =>\n        enhanceVotingFor([account, track], v, lockPeriod),\n      ),\n    )\n  const watchTracks$ = (account: SS58String) => {\n    const [getTrackById$, trackKeyChanges$] = partitionEntries(\n      typedApi.query.ConvictionVoting.VotingFor.watchEntries(account).pipe(\n        map((v) => ({\n          deltas: v.deltas\n            ? {\n                deleted: v.deltas.deleted.map((d) => ({\n                  args: [d.args[1]],\n                  value: { track: d.args[1], value: d.value },\n                })),\n                upserted: v.deltas.upserted.map((d) => ({\n                  args: [d.args[1]],\n                  value: { track: d.args[1], value: d.value },\n                })),\n              }\n            : null,\n        })),\n      ),\n    )\n\n    const trackIds$ = trackKeyChanges$.pipe(\n      toKeySet(),\n      map((set) => [...set]),\n    )\n\n    const getEnhancedTrackById$ = (id: number) =>\n      combineLatest([getTrackById$(id), voteLockingPeriod$]).pipe(\n        map(([{ track, value }, lockPeriod]) =>\n          enhanceVotingFor([account, track], value, lockPeriod),\n        ),\n      )\n\n    return { getTrackById$: getEnhancedTrackById$, trackIds$, trackKeyChanges$ }\n  }\n\n  function votingTracks$(account: SS58String): Observable<Array<VotingTrack>> {\n    const { getTrackById$, trackKeyChanges$ } = watchTracks$(account)\n    return combineKeys(trackKeyChanges$, getTrackById$).pipe(\n      map((map) => Array.from(map.values())),\n    )\n  }\n\n  return {\n    votingTrack$,\n    votingTracks$,\n    getVotingTrack(account, track) {\n      return firstValueFrom(votingTrack$(account, track))\n    },\n    getVotingTracks(account) {\n      return firstValueFrom(votingTracks$(account))\n    },\n    voteSplit(poll, vote) {\n      const voteEntries = Object.entries(vote).filter(\n        ([, value]) => (value ?? 0n) > 0n,\n      )\n      const hasAbstain = (vote.abstain ?? 0n) > 0n\n\n      const singleVote =\n        voteEntries.length === 1\n          ? {\n              vote: voteEntries[0][0] === \"aye\" ? 0x80 : 0,\n              balance: voteEntries[0][1],\n            }\n          : null\n\n      return typedApi.tx.ConvictionVoting.vote({\n        poll_index: poll,\n        vote: hasAbstain\n          ? {\n              type: \"SplitAbstain\",\n              value: {\n                abstain: vote.abstain ?? 0n,\n                aye: vote.aye ?? 0n,\n                nay: vote.nay ?? 0n,\n              },\n            }\n          : singleVote\n            ? {\n                type: \"Standard\",\n                value: singleVote,\n              }\n            : {\n                type: \"Split\",\n                value: {\n                  aye: vote.aye ?? 0n,\n                  nay: vote.nay ?? 0n,\n                },\n              },\n      })\n    },\n    vote(vote, poll, value, conviction) {\n      const voteValue =\n        (vote === \"aye\" ? 0x80 : 0) |\n        Math.max(0, convictions.indexOf(conviction ? conviction.type : \"None\"))\n\n      return typedApi.tx.ConvictionVoting.vote({\n        poll_index: poll,\n        vote: {\n          type: \"Standard\",\n          value: {\n            vote: voteValue,\n            balance: value,\n          },\n        },\n      })\n    },\n    voteAbstain(poll, value) {\n      return typedApi.tx.ConvictionVoting.vote({\n        poll_index: poll,\n        vote: {\n          type: \"SplitAbstain\",\n          value: {\n            abstain: value,\n            aye: 0n,\n            nay: 0n,\n          },\n        },\n      })\n    },\n  }\n}\n\nconst convictionLockMultiplier: Record<VotingConviction[\"type\"], number> = {\n  None: 0,\n  Locked1x: 1,\n  Locked2x: 2,\n  Locked3x: 4,\n  Locked4x: 8,\n  Locked5x: 16,\n  Locked6x: 32,\n}\n\nconst convictions = Object.keys(\n  convictionLockMultiplier,\n) as VotingConviction[\"type\"][]\n"],"names":["votes","lock","map"],"mappings":"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"}