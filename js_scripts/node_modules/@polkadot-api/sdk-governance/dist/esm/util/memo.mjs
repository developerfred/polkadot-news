const keyedMemo = (fn, cache) => (...arg) => {
  if (cache.has(arg[0])) return cache.get(arg[0]);
  const result = fn(...arg);
  cache.set(arg[0], result);
  return result;
};
const memo = (fn) => {
  let cachedKey = null;
  let cachedValue = null;
  return (...arg) => {
    if (cachedKey && cachedKey.every((k, i) => k === arg[i])) {
      return cachedValue;
    }
    cachedKey = arg;
    cachedValue = fn(...arg);
    return cachedValue;
  };
};

export { keyedMemo, memo };
//# sourceMappingURL=memo.mjs.map
