{"version":3,"file":"preimages.mjs","sources":["../../src/preimages.ts"],"sourcesContent":["import { Binary } from \"polkadot-api\"\nimport { PreimagesBounded } from \"./referenda/descriptors\"\n\nconst preimageCache = new Map<string, Promise<Binary>>()\n\nexport const getPreimageResolver = (\n  getPreimageValues: (\n    keys: [[Binary, number]][],\n  ) => Promise<(Binary | undefined)[]>,\n) => {\n  const batched = batch((preimages: [Binary, number][]) =>\n    getPreimageValues(preimages.map((v) => [v])),\n  )\n\n  return async (proposal: PreimagesBounded) => {\n    if (proposal.type === \"Legacy\")\n      throw new Error(\"Legacy proposals can't be resolved\")\n    if (proposal.type === \"Inline\") return proposal.value\n\n    const cached = preimageCache.get(proposal.value.hash.asHex())\n    if (cached) return cached\n    const promise = (async () => {\n      const result = await batched([proposal.value.hash, proposal.value.len])\n      if (!result)\n        throw new Error(`Preimage ${proposal.value.hash.asHex()} not found`)\n      return result\n    })()\n    preimageCache.set(proposal.value.hash.asHex(), promise)\n    return promise\n  }\n}\n\nconst batch = <T, R>(fn: (values: T[]) => Promise<R[]>) => {\n  let batched: Array<{\n    value: T\n    resolve: (res: R) => void\n    reject: (err: any) => void\n  }> | null = null\n\n  async function execute() {\n    if (!batched) return\n    try {\n      const result = await fn(batched.map((v) => v.value))\n      batched.forEach(({ resolve }, i) => resolve(result[i]))\n    } catch (ex) {\n      console.error(ex)\n      batched.forEach(({ reject }) => reject(ex))\n    }\n    batched = null\n  }\n\n  return (value: T): Promise<R> =>\n    new Promise((resolve, reject) => {\n      if (!batched) {\n        batched = [\n          {\n            value,\n            resolve,\n            reject,\n          },\n        ]\n        setTimeout(execute)\n      } else {\n        batched.push({\n          value,\n          resolve,\n          reject,\n        })\n      }\n    })\n}\n"],"names":[],"mappings":"AAGA,MAAM,aAAA,uBAAoB,GAA6B,EAAA;AAE1C,MAAA,mBAAA,GAAsB,CACjC,iBAGG,KAAA;AACH,EAAA,MAAM,OAAU,GAAA,KAAA;AAAA,IAAM,CAAC,SACrB,KAAA,iBAAA,CAAkB,SAAU,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,CAAC,CAAC,CAAC,CAAC;AAAA,GAC7C;AAEA,EAAA,OAAO,OAAO,QAA+B,KAAA;AAC3C,IAAA,IAAI,SAAS,IAAS,KAAA,QAAA;AACpB,MAAM,MAAA,IAAI,MAAM,oCAAoC,CAAA;AACtD,IAAA,IAAI,QAAS,CAAA,IAAA,KAAS,QAAU,EAAA,OAAO,QAAS,CAAA,KAAA;AAEhD,IAAA,MAAM,SAAS,aAAc,CAAA,GAAA,CAAI,SAAS,KAAM,CAAA,IAAA,CAAK,OAAO,CAAA;AAC5D,IAAA,IAAI,QAAe,OAAA,MAAA;AACnB,IAAA,MAAM,WAAW,YAAY;AAC3B,MAAM,MAAA,MAAA,GAAS,MAAM,OAAA,CAAQ,CAAC,QAAA,CAAS,MAAM,IAAM,EAAA,QAAA,CAAS,KAAM,CAAA,GAAG,CAAC,CAAA;AACtE,MAAA,IAAI,CAAC,MAAA;AACH,QAAM,MAAA,IAAI,MAAM,CAAY,SAAA,EAAA,QAAA,CAAS,MAAM,IAAK,CAAA,KAAA,EAAO,CAAY,UAAA,CAAA,CAAA;AACrE,MAAO,OAAA,MAAA;AAAA,KACN,GAAA;AACH,IAAA,aAAA,CAAc,IAAI,QAAS,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,IAAS,OAAO,CAAA;AACtD,IAAO,OAAA,OAAA;AAAA,GACT;AACF;AAEA,MAAM,KAAA,GAAQ,CAAO,EAAsC,KAAA;AACzD,EAAA,IAAI,OAIQ,GAAA,IAAA;AAEZ,EAAA,eAAe,OAAU,GAAA;AACvB,IAAA,IAAI,CAAC,OAAS,EAAA;AACd,IAAI,IAAA;AACF,MAAM,MAAA,MAAA,GAAS,MAAM,EAAG,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,KAAM,CAAE,CAAA,KAAK,CAAC,CAAA;AACnD,MAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,EAAE,OAAQ,EAAA,EAAG,MAAM,OAAQ,CAAA,MAAA,CAAO,CAAC,CAAC,CAAC,CAAA;AAAA,aAC/C,EAAI,EAAA;AACX,MAAA,OAAA,CAAQ,MAAM,EAAE,CAAA;AAChB,MAAA,OAAA,CAAQ,QAAQ,CAAC,EAAE,QAAa,KAAA,MAAA,CAAO,EAAE,CAAC,CAAA;AAAA;AAE5C,IAAU,OAAA,GAAA,IAAA;AAAA;AAGZ,EAAA,OAAO,CAAC,KACN,KAAA,IAAI,OAAQ,CAAA,CAAC,SAAS,MAAW,KAAA;AAC/B,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAU,OAAA,GAAA;AAAA,QACR;AAAA,UACE,KAAA;AAAA,UACA,OAAA;AAAA,UACA;AAAA;AACF,OACF;AACA,MAAA,UAAA,CAAW,OAAO,CAAA;AAAA,KACb,MAAA;AACL,MAAA,OAAA,CAAQ,IAAK,CAAA;AAAA,QACX,KAAA;AAAA,QACA,OAAA;AAAA,QACA;AAAA,OACD,CAAA;AAAA;AACH,GACD,CAAA;AACL,CAAA;;;;"}