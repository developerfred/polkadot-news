import { merge, defer, skip, mergeMap, scan, startWith, shareReplay } from 'rxjs';

const getBountyDescriptions$ = (getEntries, getValues, keyChanges$) => merge(
  defer(getEntries),
  keyChanges$.pipe(
    skip(1),
    mergeMap((changes) => {
      if (changes.type === "remove") return [];
      const keys = Array.from(changes.keys);
      return getValues(keys.map((key) => [key])).then(
        (result) => result.map((value, i) => ({
          keyArgs: [keys[i]],
          value
        })).filter(({ value }) => value != null)
      );
    })
  )
).pipe(
  scan(
    (acc, v) => ({
      ...acc,
      ...Object.fromEntries(
        v.map(({ keyArgs, value }) => [keyArgs[0], value.asText()])
      )
    }),
    {}
  ),
  startWith({}),
  shareReplay({ bufferSize: 1, refCount: true })
);

export { getBountyDescriptions$ };
//# sourceMappingURL=bounty-descriptions.mjs.map
