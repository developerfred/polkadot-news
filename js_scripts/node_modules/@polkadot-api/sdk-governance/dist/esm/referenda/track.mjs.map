{"version":3,"file":"track.mjs","sources":["../../../src/referenda/track.ts"],"sourcesContent":["import { keyBy } from \"@/util/keyBy\"\nimport {\n  ReferendaSdkTypedApi,\n  ReferendaTrackData as ReferendaTrackDescriptor,\n  ReferendaTypesCurve,\n} from \"./descriptors\"\nimport { ReferendaTrack, TrackFunctionDetails } from \"./sdk-types\"\n\nexport function enhanceTrack(track: ReferendaTrackDescriptor): ReferendaTrack {\n  return {\n    ...track,\n    minApproval: curveToFunctionDetails(\n      track.decision_period,\n      track.min_approval,\n    ),\n    minSupport: curveToFunctionDetails(\n      track.decision_period,\n      track.min_support,\n    ),\n  }\n}\n\nexport function trackFetcher(typedApi: ReferendaSdkTypedApi) {\n  const referendaTracksPromise = typedApi.constants.Referenda.Tracks().then(\n    (tracks) => {\n      const byId = Object.fromEntries(tracks)\n      const byName = keyBy(Object.values(byId), (v) => v.name)\n      return { byId, byName }\n    },\n  )\n  return async (id: number | string) => {\n    const referendaTracks = await referendaTracksPromise\n    const track =\n      typeof id === \"number\"\n        ? referendaTracks.byId[id]\n        : referendaTracks.byName[id]\n    if (!track) return null\n\n    return enhanceTrack(track)\n  }\n}\n\nconst BILLION = 1_000_000_000\nexport const BIG_BILLION = 1_000_000_000n\nconst blockToPerBill = (block: number, period: number) =>\n  (BigInt(block) * BIG_BILLION) / BigInt(period)\nconst perBillToBlock = (perBillion: bigint | null, period: number) =>\n  perBillion == null\n    ? Number.POSITIVE_INFINITY\n    : Number(bigDivCeil(perBillion * BigInt(period), BIG_BILLION))\nconst perBillToPct = (perBillion: bigint) => Number(perBillion) / BILLION\n\nfunction curveToFunctionDetails(\n  period: number,\n  curve: ReferendaTypesCurve,\n): TrackFunctionDetails {\n  const curveFn =\n    curve.type === \"LinearDecreasing\"\n      ? linearDecreasing(curve.value)\n      : curve.type === \"SteppedDecreasing\"\n        ? steppedDecreasing(curve.value)\n        : reciprocal(curve.value)\n\n  return {\n    curve,\n    getThreshold(at) {\n      return curveFn.getValue(blockToPerBill(at, period))\n    },\n    getBlock(pct) {\n      return perBillToBlock(curveFn.getTime(pct), period)\n    },\n    getData(step = 1) {\n      return curveFn\n        .getData(blockToPerBill(Math.max(step, 1), period))\n        .map(({ time, value }) => ({\n          block: perBillToBlock(time, period),\n          threshold: perBillToPct(value),\n        }))\n    },\n  }\n}\n\nconst bigCap = (\n  value: bigint,\n  cap: Partial<{ floor: bigint; ceil: bigint }>,\n) => {\n  if (cap.floor != null) value = value < cap.floor ? cap.floor : value\n  if (cap.ceil != null) value = value < cap.ceil ? cap.ceil : value\n  return value\n}\nconst bigDivCeil = (a: bigint, b: bigint) => {\n  const floor = a / b\n  return a % b === 0n ? floor : floor + 1n\n}\n\nfunction linearDecreasing(params: {\n  length: number\n  floor: number\n  ceil: number\n}) {\n  const { length, floor, ceil } = {\n    length: BigInt(params.length),\n    floor: BigInt(params.floor),\n    ceil: BigInt(params.ceil),\n  }\n\n  // v(x) = ceil + (x * (floor - ceil)) / length\n  const getValue = (at: bigint) =>\n    bigCap(ceil + (at * (floor - ceil)) / length, {\n      floor,\n      ceil,\n    })\n\n  const getTime = (value: bigint) => {\n    if (value > ceil) return 0n\n    if (value < floor) return null\n    return ((value - ceil) * length) / (floor - ceil)\n  }\n  const getData = () => [\n    {\n      time: 0n,\n      value: ceil,\n    },\n    {\n      time: length,\n      value: floor,\n    },\n    ...(BIG_BILLION > length\n      ? [\n          {\n            time: BIG_BILLION,\n            value: floor,\n          },\n        ]\n      : []),\n  ]\n  return { getValue, getTime, getData }\n}\nfunction steppedDecreasing(params: {\n  begin: number\n  end: number\n  step: number\n  period: number\n}) {\n  const { begin, end, step, period } = {\n    begin: BigInt(params.begin),\n    end: BigInt(params.end),\n    step: BigInt(params.step),\n    period: BigInt(params.period),\n  }\n\n  const getValue = (at: bigint) =>\n    bigCap(begin - (at / period) * step, {\n      ceil: begin,\n      floor: end,\n    })\n\n  const getTime = (value: bigint) => {\n    if (value > begin) return 0n\n    if (value < end) return null\n    return ((begin - value) / step) * period\n  }\n  const getData = () => {\n    const result: Array<{\n      time: bigint\n      value: bigint\n    }> = []\n\n    for (let k = 0n, value = begin; value > end; value -= step) {\n      result.push({\n        time: k * period,\n        value,\n      })\n    }\n    if ((begin - end) % step != 0n) {\n      result.push({\n        time: ((begin - end) / step) * period,\n        value: end,\n      })\n    }\n    if (result.at(-1)?.time! < BIG_BILLION) {\n      result.push({\n        time: BIG_BILLION,\n        value: end,\n      })\n    }\n\n    return result\n  }\n  return { getValue, getTime, getData }\n}\nfunction reciprocal({\n  factor,\n  x_offset,\n  y_offset,\n}: {\n  factor: bigint\n  x_offset: bigint\n  y_offset: bigint\n}) {\n  // v(x) = factor/(x+x_offset)-y_offset\n  const getValue = (at: bigint) =>\n    (BIG_BILLION * factor) / (at + x_offset) + y_offset\n  const getTime = (value: bigint) => {\n    // Below horizontal asymptote => will never intersect\n    if (value <= y_offset) return null\n    // Above y-axis cut => 0\n    // It needs to be multiplied by BIG_BILLION when dividing because we're working with perbillion\n    if (x_offset != 0n && value > (BIG_BILLION * factor) / x_offset + y_offset)\n      return 0n\n\n    return (BIG_BILLION * factor) / (value - y_offset) - x_offset\n  }\n  const getData = (step: bigint) => {\n    const result: Array<{\n      time: bigint\n      value: bigint\n    }> = []\n\n    for (let time = 0n; time <= BIG_BILLION; time += step) {\n      result.push({ time, value: getValue(time) })\n    }\n    if (result.at(-1)?.time! < BIG_BILLION) {\n      result.push({\n        time: BIG_BILLION,\n        value: getValue(BIG_BILLION),\n      })\n    }\n\n    return result\n  }\n  return { getValue, getTime, getData }\n}\n"],"names":[],"mappings":"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"}