import { SdkDefinition } from '@polkadot-api/common-sdk-utils';
import { TypedApi, PalletsTypedef, StorageDescriptor, Binary, Enum, SS58String, FixedSizeArray, TxDescriptor, TxCallData, PlainDescriptor, ApisTypedef, FixedSizeBinary, Transaction, TxEvent } from 'polkadot-api';
import { Observable } from 'rxjs';

type WhoAmount = {
    who: SS58String;
    amount: bigint;
};
type BasicReferendumInfo = [
    number,
    WhoAmount | undefined,
    WhoAmount | undefined
];
type PolkadotRuntimeOriginCaller = Enum<{
    system: Enum<{
        Root: undefined;
        Signed: SS58String;
        None: undefined;
    }>;
    Origins: Enum<{
        StakingAdmin: undefined;
        Treasurer: undefined;
        FellowshipAdmin: undefined;
        GeneralAdmin: undefined;
        AuctionAdmin: undefined;
        LeaseAdmin: undefined;
        ReferendumCanceller: undefined;
        ReferendumKiller: undefined;
        SmallTipper: undefined;
        BigTipper: undefined;
        SmallSpender: undefined;
        MediumSpender: undefined;
        BigSpender: undefined;
        WhitelistedCaller: undefined;
        WishForChange: undefined;
    }>;
    ParachainsOrigin: Enum<{
        Parachain: number;
    }>;
    XcmPallet: any;
    Void: undefined;
}>;
type PreimagesBounded = Enum<{
    Legacy: {
        hash: Binary;
    };
    Inline: Binary;
    Lookup: {
        hash: Binary;
        len: number;
    };
}>;
type TraitsScheduleDispatchTime = Enum<{
    At: number;
    After: number;
}>;
type ReferendumInfo = Enum<{
    Ongoing: {
        track: number;
        origin: PolkadotRuntimeOriginCaller;
        proposal: PreimagesBounded;
        enactment: Enum<{
            At: number;
            After: number;
        }>;
        submitted: number;
        submission_deposit: WhoAmount;
        decision_deposit?: WhoAmount | undefined;
        deciding?: {
            since: number;
            confirming?: number | undefined;
        } | undefined;
        tally: {
            ayes: bigint;
            nays: bigint;
            support: bigint;
        };
        in_queue: boolean;
        alarm?: [number, FixedSizeArray<2, number>] | undefined;
    };
    Approved: BasicReferendumInfo;
    Rejected: BasicReferendumInfo;
    Cancelled: BasicReferendumInfo;
    TimedOut: BasicReferendumInfo;
    Killed: number;
}>;
type ReferendaTypesCurve = Enum<{
    LinearDecreasing: {
        length: number;
        floor: number;
        ceil: number;
    };
    SteppedDecreasing: {
        begin: number;
        end: number;
        step: number;
        period: number;
    };
    Reciprocal: {
        factor: bigint;
        x_offset: bigint;
        y_offset: bigint;
    };
}>;
type ReferendaTrackData = {
    name: string;
    max_deciding: number;
    decision_deposit: bigint;
    prepare_period: number;
    decision_period: number;
    confirm_period: number;
    min_enactment_period: number;
    min_approval: ReferendaTypesCurve;
    min_support: ReferendaTypesCurve;
};
type ReferendaSdkPallets = PalletsTypedef<{
    Preimage: {
        PreimageFor: StorageDescriptor<[
            Key: [Binary, number]
        ], Binary, true, never>;
    };
    Referenda: {
        /**
         * Information concerning any given referendum.
         */
        ReferendumInfoFor: StorageDescriptor<[
            Key: number
        ], ReferendumInfo, true, never>;
    };
    Balances: {
        TotalIssuance: StorageDescriptor<[], bigint, false, never>;
        InactiveIssuance: StorageDescriptor<[], bigint, false, never>;
    };
}, {
    Referenda: {
        submit: TxDescriptor<{
            proposal_origin: PolkadotRuntimeOriginCaller;
            proposal: PreimagesBounded;
            enactment_moment: TraitsScheduleDispatchTime;
        }>;
    };
    Utility: {
        batch_all: TxDescriptor<{
            calls: Array<TxCallData>;
        }>;
    };
    Preimage: {
        note_preimage: TxDescriptor<{
            bytes: Binary;
        }>;
    };
}, {
    Referenda: {
        Submitted: PlainDescriptor<{
            index: number;
            track: number;
            proposal: PreimagesBounded;
        }>;
    };
}, {}, {
    Referenda: {
        Tracks: PlainDescriptor<Array<[number, ReferendaTrackData]>>;
    };
}>;
type ReferendaSdkDefinition = SdkDefinition<ReferendaSdkPallets, ApisTypedef<{}>>;
type ReferendaSdkTypedApi = TypedApi<ReferendaSdkDefinition>;

declare const SpenderOrigin: {
    readonly Treasurer: "Treasurer";
    readonly SmallTipper: "SmallTipper";
    readonly BigTipper: "BigTipper";
    readonly SmallSpender: "SmallSpender";
    readonly MediumSpender: "MediumSpender";
    readonly BigSpender: "BigSpender";
};
type Origin = (typeof SpenderOrigin)[keyof typeof SpenderOrigin];
declare const polkadotSpenderOrigin: (value: bigint) => Origin | null;
declare const kusamaSpenderOrigin: (value: bigint) => Origin | null;

type BountiesBountyStatus = Enum<{
    Proposed: undefined;
    Approved: undefined;
    Funded: undefined;
    CuratorProposed: {
        curator: SS58String;
    };
    Active: {
        curator: SS58String;
        update_due: number;
    };
    PendingPayout: {
        curator: SS58String;
        beneficiary: SS58String;
        unlock_at: number;
    };
}>;
interface BountyWithoutDescription {
    proposer: SS58String;
    value: bigint;
    fee: bigint;
    curator_deposit: bigint;
    bond: bigint;
    status: BountiesBountyStatus;
}
type BountiesSdkPallets = PalletsTypedef<{
    Preimage: {
        PreimageFor: StorageDescriptor<[
            Key: [Binary, number]
        ], Binary, true, never>;
    };
    Bounties: {
        /**
         * Number of bounty proposals that have been made.
         */
        BountyCount: StorageDescriptor<[], number, false, never>;
        /**
         * Bounties that have been made.
         */
        Bounties: StorageDescriptor<[
            Key: number
        ], BountyWithoutDescription, true, never>;
        /**
         * The description of each bounty.
         */
        BountyDescriptions: StorageDescriptor<[Key: number], Binary, true, never>;
    };
    Scheduler: {
        /**
         * Items to be executed, indexed by the block number that they should be executed on.
         */
        Agenda: StorageDescriptor<[
            Key: number
        ], Array<{
            maybe_id?: FixedSizeBinary<32> | undefined;
            priority: number;
            call: PreimagesBounded;
            maybe_periodic?: FixedSizeArray<2, number> | undefined;
            origin: PolkadotRuntimeOriginCaller;
        } | undefined>, false, never>;
    };
}, {
    Bounties: {
        approve_bounty: TxDescriptor<{
            bounty_id: number;
        }>;
        propose_curator: TxDescriptor<{
            bounty_id: number;
            curator: MultiAddress;
            fee: bigint;
        }>;
        unassign_curator: TxDescriptor<{
            bounty_id: number;
        }>;
        accept_curator: TxDescriptor<{
            bounty_id: number;
        }>;
        award_bounty: TxDescriptor<{
            bounty_id: number;
            beneficiary: MultiAddress;
        }>;
        claim_bounty: TxDescriptor<{
            bounty_id: number;
        }>;
        close_bounty: TxDescriptor<{
            bounty_id: number;
        }>;
        extend_bounty_expiry: TxDescriptor<{
            bounty_id: number;
            remark: Binary;
        }>;
    };
}, {
    Bounties: {
        /**
         *New bounty proposal.
         */
        BountyProposed: PlainDescriptor<{
            index: number;
        }>;
    };
}, {}, {}>;
type BountiesSdkDefinition = SdkDefinition<BountiesSdkPallets, ApisTypedef<{}>>;
type BountiesSdkTypedApi = TypedApi<BountiesSdkDefinition>;
type MultiAddress = Enum<{
    Id: SS58String;
    Index: undefined;
    Raw: Binary;
    Address32: FixedSizeBinary<32>;
    Address20: FixedSizeBinary<20>;
}>;

type ConvictionVotingVoteAccountVote = Enum<{
    Standard: {
        vote: number;
        balance: bigint;
    };
    Split: {
        aye: bigint;
        nay: bigint;
    };
    SplitAbstain: {
        aye: bigint;
        nay: bigint;
        abstain: bigint;
    };
}>;
type VotingConviction = Enum<{
    None: undefined;
    Locked1x: undefined;
    Locked2x: undefined;
    Locked3x: undefined;
    Locked4x: undefined;
    Locked5x: undefined;
    Locked6x: undefined;
}>;
type ConvictionVotingVoteVoting = Enum<{
    Casting: {
        votes: Array<[number, ConvictionVotingVoteAccountVote]>;
        delegations: {
            votes: bigint;
            capital: bigint;
        };
        prior: [number, bigint];
    };
    Delegating: {
        balance: bigint;
        target: SS58String;
        conviction: VotingConviction;
        delegations: {
            votes: bigint;
            capital: bigint;
        };
        prior: [number, bigint];
    };
}>;
type VotingSdkPallets = PalletsTypedef<{
    ConvictionVoting: {
        VotingFor: StorageDescriptor<[
            SS58String,
            number
        ], ConvictionVotingVoteVoting, false, never>;
    };
}, {
    ConvictionVoting: {
        vote: TxDescriptor<{
            poll_index: number;
            vote: ConvictionVotingVoteAccountVote;
        }>;
        delegate: TxDescriptor<{
            class: number;
            to: MultiAddress;
            conviction: VotingConviction;
            balance: bigint;
        }>;
        undelegate: TxDescriptor<{
            class: number;
        }>;
        unlock: TxDescriptor<{
            class: number;
            target: MultiAddress;
        }>;
        remove_vote: TxDescriptor<{
            class: number | undefined;
            index: number;
        }>;
    };
}, {}, {}, {
    ConvictionVoting: {
        VoteLockingPeriod: PlainDescriptor<number>;
    };
}>;
type VotingSdkDefinition = SdkDefinition<VotingSdkPallets, ApisTypedef<{}>>;
type VotingSdkTypedApi = TypedApi<VotingSdkDefinition>;

type PollOutcome = {
    ended: number;
    side: "aye" | "nay";
} | null;
/**
 * Types:
 * - free: The funds locked by this vote will become free once the vote is removed.
 * - locked: The funds locked by this vote will become locked once the vote is removed.
 * - extends: Removing this vote will extend the duration of a pre-existing lock.
 * - extended: Removing this vote before its end will have it locked for the duration of the pre-existing lock.
 */
type VoteLock = {
    type: "free";
} | {
    type: "locked" | "extends" | "extended";
    end: number;
};
interface CommonVote {
    poll: number;
    balance: bigint;
    getLock(outcome: PollOutcome): VoteLock;
    remove(): Transaction<any, string, string, unknown>;
}
interface StandardVote extends CommonVote {
    type: "standard";
    direction: "aye" | "nay" | "abstain";
    conviction: VotingConviction;
}
interface SplitVote extends CommonVote {
    type: "split";
    aye: bigint;
    nay: bigint;
    abstain: bigint;
}
type Vote = StandardVote | SplitVote;
interface TrackDetails {
    track: number;
    delegationPower: DelegationPower;
    lock: {
        block: number;
        balance: bigint;
    } | null;
    unlock(): Transaction<any, string, string, unknown>;
}
type UnlockSchedule = Array<{
    block: number;
    balance: bigint;
    unlocks: Array<{
        type: "poll";
        id: number;
    } | {
        type: "lock";
    }>;
}>;
interface TrackCasting extends TrackDetails {
    type: "casting";
    votes: Vote[];
    getUnlockSchedule(pollOutcomes: Record<number, PollOutcome>): UnlockSchedule;
}
interface TrackDelegating extends TrackDetails {
    type: "delegating";
    target: SS58String;
    balance: bigint;
    conviction: VotingConviction;
    lockDuration: number;
    remove(): Transaction<any, string, string, unknown>;
}
type VotingTrack = TrackCasting | TrackDelegating;
interface DelegationPower {
    track: number;
    votes: bigint;
    capital: bigint;
}
interface ConvictionVotingSdk {
    getVotingTracks(account: SS58String): Promise<Array<VotingTrack>>;
    getVotingTrack(account: SS58String, track: number): Promise<VotingTrack>;
    votingTracks$(account: SS58String): Observable<Array<VotingTrack>>;
    votingTrack$(account: SS58String, track: number): Observable<VotingTrack>;
    vote(vote: "aye" | "nay", poll: number, value: bigint, conviction?: VotingConviction): Transaction<any, string, string, unknown>;
    voteAbstain(poll: number, value: bigint): Transaction<any, string, string, unknown>;
    voteSplit(poll: number, vote: Partial<{
        aye: bigint;
        nay: bigint;
        abstain: bigint;
    }>): Transaction<any, string, string, unknown>;
}

type RawOngoingReferendum = (ReferendumInfo & {
    type: "Ongoing";
})["value"];
interface ReferendumDetails {
    title?: string;
}
type OngoingReferendum = Omit<RawOngoingReferendum, "proposal"> & {
    type: "Ongoing";
    id: number;
    proposal: {
        rawValue: PreimagesBounded;
        resolve: () => Promise<Binary>;
        decodedCall: () => Promise<{
            type: string;
            value: {
                type: string;
                value: any;
            };
        }>;
    };
    getDetails: (apiKey: string) => Promise<ReferendumDetails>;
    getConfirmationStart: () => Promise<number | null>;
    getConfirmationEnd: () => Promise<number | null>;
    getTrack: () => Promise<ReferendaTrack>;
    outcome: PollOutcome;
    getExpectedOutcome: () => Promise<PollOutcome>;
};
interface ClosedReferendum {
    type: "Approved" | "Rejected" | "Cancelled" | "TimedOut" | "Killed";
    outcome: PollOutcome;
    block: number;
    submission_deposit: WhoAmount | undefined;
    decision_deposit: WhoAmount | undefined;
}
type Referendum = OngoingReferendum | ClosedReferendum;
interface ReferendaSdkConfig {
    spenderOrigin: (value: bigint) => Origin | null;
}
/**
 * threshold are in perbillion
 */
interface TrackFunctionDetails {
    curve: ReferendaTypesCurve;
    getThreshold(block: number): bigint;
    getBlock(threshold: bigint): number;
    getData(step?: number): Array<{
        block: number;
        threshold: number;
    }>;
}
type ReferendaTrack = Omit<ReferendaTrackData, "min_approval" | "min_support"> & {
    minApproval: TrackFunctionDetails;
    minSupport: TrackFunctionDetails;
};
interface ReferendaSdk {
    getReferenda(): Promise<Referendum[]>;
    getReferendum(id: number): Promise<Referendum | null>;
    watch: {
        referenda$: Observable<Map<number, Referendum>>;
        referendaIds$: Observable<number[]>;
        getReferendumById$: (key: number) => Observable<Referendum>;
    };
    getSpenderTrack(value: bigint): {
        origin: PolkadotRuntimeOriginCaller;
        track: Promise<ReferendaTrack>;
    };
    getTrack(id: number | string): Promise<ReferendaTrack | null>;
    createReferenda(origin: PolkadotRuntimeOriginCaller, proposal: Binary, options?: Partial<{
        enactment: TraitsScheduleDispatchTime;
    }>): Transaction<any, string, string, unknown>;
    createSpenderReferenda(callData: Binary, value: bigint): Transaction<any, string, string, unknown>;
    getSubmittedReferendum(txEvent: TxEvent): {
        index: number;
        track: number;
        proposal: PreimagesBounded;
    } | null;
}

declare function createReferendaSdk(typedApi: ReferendaSdkTypedApi, config?: Partial<ReferendaSdkConfig>): ReferendaSdk;

interface GenericBounty extends BountyWithoutDescription {
    type: BountiesBountyStatus["type"];
    id: number;
    description: string | null;
    account: SS58String;
}
interface ClosableBounty$1 {
    close(): Transaction<any, string, string, unknown>;
}
interface ProposedBounty extends GenericBounty, ClosableBounty$1 {
    type: "Proposed";
    approve(): Transaction<any, string, string, unknown>;
    filterApprovingReferenda(referenda: OngoingReferendum[]): Promise<OngoingReferendum[]>;
    getScheduledApprovals(): Promise<number[]>;
}
interface ApprovedBounty extends GenericBounty {
    type: "Approved";
}
interface FundedBounty extends GenericBounty, ClosableBounty$1 {
    type: "Funded";
    proposeCurator(curator: SS58String, fee: bigint): Transaction<any, string, string, unknown>;
    filterProposingReferenda(referenda: OngoingReferendum[]): Promise<Array<{
        referendum: OngoingReferendum;
        proposeCuratorCalls: {
            curator: MultiAddress;
            fee: bigint;
        }[];
    }>>;
    getScheduledProposals(): Promise<Array<{
        height: number;
        proposeCuratorCalls: {
            curator: MultiAddress;
            fee: bigint;
        }[];
    }>>;
}
interface CuratorUnassignable$1 {
    unassignCurator(): Transaction<any, string, string, unknown>;
}
interface CuratorProposedBounty extends GenericBounty, CuratorUnassignable$1, ClosableBounty$1 {
    type: "CuratorProposed";
    curator: SS58String;
    acceptCuratorRole(): Transaction<any, string, string, unknown>;
}
interface ActiveBounty extends GenericBounty, CuratorUnassignable$1, ClosableBounty$1 {
    type: "Active";
    curator: SS58String;
    updateDue: number;
    extendExpiry(remark?: string): Transaction<any, string, string, unknown>;
    award(beneficiary: SS58String): Transaction<any, string, string, unknown>;
}
interface PendingPayoutBounty extends GenericBounty, CuratorUnassignable$1 {
    type: "PendingPayout";
    curator: SS58String;
    beneficiary: SS58String;
    unlockAt: number;
    claim(): Transaction<any, string, string, unknown>;
}
type Bounty = ProposedBounty | ApprovedBounty | FundedBounty | CuratorProposedBounty | ActiveBounty | PendingPayoutBounty;
interface BountiesSdk {
    watch: {
        bounties$: Observable<Map<number, Bounty>>;
        bountyIds$: Observable<number[]>;
        getBountyById$: (key: number) => Observable<Bounty>;
    };
    getBounty(id: number): Promise<Bounty | null>;
    getBounties(): Promise<Bounty[]>;
    getProposedBounty(txEvent: TxEvent): Promise<ProposedBounty | null>;
}

declare function createBountiesSdk(typedApi: BountiesSdkTypedApi): BountiesSdk;

type BountiesChildBountyStatus = Enum<{
    Added: undefined;
    CuratorProposed: {
        curator: SS58String;
    };
    Active: {
        curator: SS58String;
    };
    PendingPayout: {
        curator: SS58String;
        beneficiary: SS58String;
        unlock_at: number;
    };
}>;
interface ChildBountyWithoutDescription {
    parent_bounty: number;
    value: bigint;
    fee: bigint;
    curator_deposit: bigint;
    status: BountiesChildBountyStatus;
}
type ChildBountiesSdkPallets = PalletsTypedef<{
    ChildBounties: {
        /**
         * Number of child bounties per parent bounty.
         * Map of parent bounty index to number of child bounties.
         */
        ParentChildBounties: StorageDescriptor<[
            Key: number
        ], number, false, never>;
        /**
         * Child bounties that have been added.
         */
        ChildBounties: StorageDescriptor<FixedSizeArray<2, number>, ChildBountyWithoutDescription, true, never>;
        /**
         * The description of each child-bounty.
         */
        ChildBountyDescriptions: StorageDescriptor<[
            Key: number
        ], Binary, true, never>;
    };
}, {
    ChildBounties: {
        add_child_bounty: TxDescriptor<{
            parent_bounty_id: number;
            value: bigint;
            description: Binary;
        }>;
        propose_curator: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
            curator: MultiAddress;
            fee: bigint;
        }>;
        accept_curator: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
        }>;
        unassign_curator: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
        }>;
        award_child_bounty: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
            beneficiary: MultiAddress;
        }>;
        claim_child_bounty: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
        }>;
        close_child_bounty: TxDescriptor<{
            parent_bounty_id: number;
            child_bounty_id: number;
        }>;
    };
}, {}, {}, {}>;
type ChildBountiesSdkDefinition = SdkDefinition<ChildBountiesSdkPallets, ApisTypedef<{}>>;
type ChildBountiesSdkTypedApi = TypedApi<ChildBountiesSdkDefinition>;

interface GenericChildBounty extends ChildBountyWithoutDescription {
    type: BountiesChildBountyStatus["type"];
    id: number;
    description: string | null;
    account: SS58String;
}
interface ClosableBounty {
    close(): Transaction<any, string, string, unknown>;
}
interface AddedChildBounty extends GenericChildBounty, ClosableBounty {
    type: "Added";
    proposeCurator(curator: SS58String, fee: bigint): Transaction<any, string, string, unknown>;
}
interface CuratorUnassignable {
    unassignCurator(): Transaction<any, string, string, unknown>;
}
interface CuratorProposedChildBounty extends GenericChildBounty, CuratorUnassignable, ClosableBounty {
    type: "CuratorProposed";
    curator: SS58String;
    acceptCuratorRole(): Transaction<any, string, string, unknown>;
}
interface ActiveChildBounty extends GenericChildBounty, CuratorUnassignable, ClosableBounty {
    type: "Active";
    curator: SS58String;
    award(beneficiary: SS58String): Transaction<any, string, string, unknown>;
}
interface PendingPayoutChildBounty extends GenericChildBounty, CuratorUnassignable {
    type: "PendingPayout";
    curator: SS58String;
    beneficiary: SS58String;
    unlockAt: number;
    claim(): Transaction<any, string, string, unknown>;
}
type ChildBounty = AddedChildBounty | CuratorProposedChildBounty | ActiveChildBounty | PendingPayoutChildBounty;
interface ChildBountiesSdk {
    watch(parentId: number): {
        bounties$: Observable<Map<number, ChildBounty>>;
        bountyIds$: Observable<number[]>;
        getBountyById$: (key: number) => Observable<ChildBounty>;
    };
    getChildBounty(parentId: number, id: number): Promise<ChildBounty | null>;
}

declare function createChildBountiesSdk(typedApi: ChildBountiesSdkTypedApi): ChildBountiesSdk;

declare function createConvictionVotingSdk(typedApi: VotingSdkTypedApi): ConvictionVotingSdk;

export { type ActiveBounty, type ActiveChildBounty, type AddedChildBounty, type ApprovedBounty, type BountiesBountyStatus, type BountiesChildBountyStatus, type BountiesSdk, type BountiesSdkTypedApi, type Bounty, type BountyWithoutDescription, type ChildBountiesSdk, type ChildBountiesSdkTypedApi, type ChildBounty, type ChildBountyWithoutDescription, type ClosedReferendum, type ConvictionVotingSdk, type ConvictionVotingVoteAccountVote, type ConvictionVotingVoteVoting, type CuratorProposedBounty, type CuratorProposedChildBounty, type DelegationPower, type FundedBounty, type GenericBounty, type GenericChildBounty, type MultiAddress, type OngoingReferendum, type Origin, type PendingPayoutBounty, type PendingPayoutChildBounty, type PolkadotRuntimeOriginCaller, type PollOutcome, type PreimagesBounded, type ProposedBounty, type ReferendaSdk, type ReferendaSdkConfig, type ReferendaSdkTypedApi, type ReferendaTrack, type ReferendaTrackData, type ReferendaTypesCurve, type Referendum, type ReferendumDetails, type ReferendumInfo, type SplitVote, type StandardVote, type TrackCasting, type TrackDelegating, type TrackFunctionDetails, type TraitsScheduleDispatchTime, type UnlockSchedule, type Vote, type VoteLock, type VotingConviction, type VotingSdkTypedApi, type VotingTrack, type WhoAmount, createBountiesSdk, createChildBountiesSdk, createConvictionVotingSdk, createReferendaSdk, kusamaSpenderOrigin, polkadotSpenderOrigin };
